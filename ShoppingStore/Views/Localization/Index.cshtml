@using AspNetCore.JsonLocalization
@model LocalizedViewModel

@inject IViewLocalizer Localizer

<br />
<button type="button" id="addNewKeyName" class="btn btn-primary" data-container="body" data-toggle="popover" data-placement="bottom" data-title="Add New KeyName"
        data-html="true"
        data-content='
        <div id="addNewKeyName_validation" class="text-danger"></div>
       <form id="addNewKeyName_form">
        <div class="form-group">
            <label for="addKeyName">KeyName</label>
            <input id="addKeyName" name="pk"type="text" class="form-control" />
        </div>
        <div class="form-group">
            <label for="addCulture">Culture</label>
            <input id="addCulture" name="culture"type="text" class="form-control" />
        </div>
        <div class="form-group">
            <label for="addValue">Value</label>
            <input id="addValue" name="value"type="text" class="form-control" />
        </div>
        <div class="form-group">
            <button class="btn btn-primary" type="submit">Add</button>
            <button id="addNewKeyName_cancel"class="btn btn-default">Cancel</button>
        </div>
    </form>
   '>
    Add New KeyName
</button>
<br />
<br />
<div class="panel panel-success">
    <div class="panel panel-heading">
        @Localizer["Localization Table"]
    </div>

    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>@Localizer["KeyName"]</th>
                <th>
                    @Localizer["CultureCode"]
                </th>
                <th>@Localizer["LocalizedValue"]</th>
                <th>@Localizer["Delete Language"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var local in Model.Items)
            {
                <tr>
                    <td id="@(local.Key)_td" rowspan="@((int)local.Value.Count()+2)">
                        <div>
                            <a href="#" id="@local.Key.Replace(" ",String.Empty)" data-type="text" data-pk="@local.Key" data-url="/api/editkeyname" data-title="Modified KeyName">
                                @local.Key
                            </a>
                        </div>
                        <br/>
                        <button class="btn btn-danger" id="@(local.Key.Replace(" ",String.Empty))_delete" data-container="body" data-toggle="popover" data-title="Are you sure?"
                                data-html="true"
                                data-content='
                                    <form id="@(local.Key.Replace(" ",String.Empty))_deleteForm">
                                        <div class="form-group">
                                            <input type="hidden" name="pk" value="@local.Key"/>
                                            <button type="submit" class="btn btn-sm btn-primary">Confirm</button>
                                            <button id="@(local.Key)_delete_cancel"type="button" class="btn btn-sm btn-default">Cancel</button>
                                        </div>
                                    </form>
                                '>Delete</button>
                    </td>
                </tr>

                @foreach (var l in local.Value)
                {
                    <tr>
                        <td>
                            @l.Key
                        </td>
                        <td>
                            <a href="#" id="@local.Key.Replace(" ",String.Empty)_@(l.Key)" data-type="text" data-pk="@local.Key" data-name="@l.Key" data-url="api/editvalue" data-title="Modified Localized Value">
                                @l.Value
                            </a>
                        </td>
                        <td>
                            <button type="button" id="@(local.Key.Replace(" ",String.Empty))_@(l.Key)_btnDelete" data-container="body" data-toggle="popover" class="btn btn-sm btn-danger" title="Are you sure?"
                                    data-html="true"
                                    data-content='
                             <div class="text-danger"id="validation-message"></div>
                             <form id="@(local.Key.Replace(" ",String.Empty))_@(l.Key)_deleteForm">
                                 <div class="form-group">
                                     <input type="hidden" value="@local.Key.Replace(" ",String.Empty)" name="@l.Key" class="btn btn-danger" />
                                     <button type="submit"class="btn btn-sm btn-primary" >Confirm</button>
                                     <button type="button" class="btn btn-default" id="@(local.Key.Replace(" ",String.Empty))_@(l.Key)_cancelDelete">Cancel</button>
                                 </div>
                             </form>
                            '>
                            Delete
                        </button>
                        </td>
                    </tr>
                }
                <tr>
                    <td>
                        <button type="button" id="@(local.Key.Replace(" ",String.Empty))_new" class="btn btn-sm btn-success" data-container="body" data-toggle="popover" title="New lang and value"
                                data-html="true"
                                data-content='
                                <div class="text-danger"id="validation-message"></div>
                                <form id="@(local.Key.Replace(" ",String.Empty))_form">
                                    <div class="form-group">
                                        <label for="culture-input">Culture</label>
                                        <input id="culture-input" name="@local.Key" type="text" class="form-control input-sm" />
                                    </div>
                                    <div class="form-group">
                                        <label for="value-input">Value</label>
                                        <input id="value-input" name="@local.Key" type="text" class="form-control input-sm" />
                                    </div>
                                    <div class="form-group">
                                        <button type="submit" class="btn btn-primary btn-sm">
                                            <i class="glyphicon glyphicon-ok"></i>
                                        </button>
                                        <button id="@(local.Key)_cancel" type="button" class="btn btn-default btn-sm">
                                            <i class="glyphicon glyphicon-remove"></i>
                                        </button>
                                    </div>
                                </form>'>
                            Add New Language And Value
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<pagination page-controller="Localization"
            page-action="Index"
            current-page="@Model.Page"
            total-items="@Model.TotalItems"
            item-per-page="@Model.ItemPerPage">

</pagination>

@section Scripts{
    <script src="~/lib/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.js"></script>
    <script>
        $(function () {
            $('#addNewKeyName').popover();

            $(document).on('click', '#addNewKeyName_cancel', function (e) {
                e.preventDefault();

                $('body').on('hidden.bs.popover', function (e) {
                    $(e.target).data("bs.popover").inState.click = false;
                });

                $('#addNewKeyName').popover('hide');
            });



            $('body').on('mousedown', function (e) {
                $('#addNewKeyName').each(function () {
                    //Check if the popover is active / contain an aria-describedby with a value
                    if ($(this).attr('aria-describedby') != null) {
                        //Put the value in a variable
                        var id = $(this).attr('aria-describedby');
                        if (!$(e.target).closest(".popover-content").length &&
                            $(e.target).attr("aria-describedby") != id &&
                            //Look if the click is a child of the popover box or if it's the button itself or a child of the button
                            !$(e.target).closest('[aria-describedby="' + id + '"').length) {
                            //trigger a click as if you clicked the button
                            $('[aria-describedby="' + id + '"]').trigger("click");
                        }
                    }
                });
            });

            $(document).on('submit', '#addNewKeyName_form', function (e) {
                e.preventDefault();

                formData = $(this).serialize();

                $.ajax({
                    url: "api/addNewKeyName",
                    type: "POST",
                    data: formData
                }).done(function (data) {
                    location.reload();
                }).fail(function (xhr, textStatus, errorThrown) {
                    console.log(xhr.responseText);
                    console.log(textStatus);
                    console.log(errorThrown);
                    $('#addNewKeyName_validation').html(xhr.responseText);
                    console.log("failed");
                });
            });

        });
    </script>

    @foreach (var local in Model.Items)
    {
        <script>
            $.fn.editable.defaults.mode = "popup";

            $(function () {

                $('#@local.Key.Replace(" ", String.Empty)_new').popover();

                $(document).on('click', '#@(local.Key)_cancel', function (e) {
                    e.preventDefault();

                    $('body').on('hidden.bs.popover', function (e) {
                        $(e.target).data("bs.popover").inState.click = false;
                    });

                    $('#@local.Key.Replace(" ", String.Empty)_new').popover('hide');
                });

                 $('body').on('mousedown', function (e) {
                        $('#@local.Key.Replace(" ", String.Empty)_new').each(function () {
                            //Check if the popover is active / contain an aria-describedby with a value
                            if ($(this).attr('aria-describedby') != null) {
                                //Put the value in a variable
                                var id = $(this).attr('aria-describedby');
                                if (!$(e.target).closest(".popover-content").length &&
                                    $(e.target).attr("aria-describedby") != id &&
                                    //Look if the click is a child of the popover box or if it's the button itself or a child of the button
                                    !$(e.target).closest('[aria-describedby="' + id + '"').length) {
                                    //trigger a click as if you clicked the button
                                    $('[aria-describedby="' + id + '"]').trigger("click");
                                }
                            }
                        });
                    });
                 $(document).on('submit', '#@(local.Key.Replace(" ",String.Empty))_form', function (e) {

                        formData = $(this).serializeArray();
                        console.log(formData);

                        dataString = "pk=" + formData[0].name + "&culture=" + formData[0].value + "&value=" + formData[1].value;

                        $.ajax({
                            url: "api/addNewCulture",
                            type: "POST",
                            data: dataString
                        }).done(function (data) {
                            location.reload();
                        }).fail(function (xhr, textStatus, errorThrown) {
                            console.log(xhr.responseText);
                            console.log(textStatus);
                            console.log(errorThrown);
                            $('#validation-message').html(xhr.responseText);
                            console.log("failed");
                        });
                        e.preventDefault();
                    });

                    $('#@local.Key.Replace(" ", String.Empty)').editable({
                        error: function (response, newValue) {
                            if (response.status === 500) {
                                return 'Service unavailable. Please try later.';
                            } else {
                                return 'Value can\'t be null';
                            }
                        }
                    });


                $('#@local.Key.Replace(" ", String.Empty)_delete').popover();

                $(document).on('click', '#@(local.Key)_delete_cancel', function (e) {
                    e.preventDefault();

                    $('body').on('hidden.bs.popover', function (e) {
                        $(e.target).data("bs.popover").inState.click = false;
                    });

                    $('#@(local.Key.Replace(" ", String.Empty))_delete').popover('hide');
                });

                 $('body').on('mousedown', function (e) {
                        $('#@local.Key.Replace(" ", String.Empty)_delete').each(function () {
                            //Check if the popover is active / contain an aria-describedby with a value
                            if ($(this).attr('aria-describedby') != null) {
                                //Put the value in a variable
                                var id = $(this).attr('aria-describedby');
                                if (!$(e.target).closest(".popover-content").length &&
                                    $(e.target).attr("aria-describedby") != id &&
                                    //Look if the click is a child of the popover box or if it's the button itself or a child of the button
                                    !$(e.target).closest('[aria-describedby="' + id + '"').length) {
                                    //trigger a click as if you clicked the button
                                    $('[aria-describedby="' + id + '"]').trigger("click");
                                }
                            }
                        });
                    });

                 $(document).on('submit', '#@(local.Key.Replace(" ",String.Empty))_deleteForm', function (e) {

                     formData = $(this).serialize();
                     console.log(formData);

                        $.ajax({
                            url: "api/deleteKeyName",
                            type: "DELETE",
                            data: formData 
                        }).done(function (data) {
                            location.reload();
                        }).fail(function (xhr, textStatus, errorThrown) {
                            console.log(xhr.responseText);
                            console.log(textStatus);
                            console.log(errorThrown);
                            $('#validation-message').html(xhr.responseText);
                            console.log("failed");
                        });
                        e.preventDefault();
                    });
            });
        </script>
    }


    @foreach (var local in Model.Items)
    {
        @foreach (var l in local.Value)
        {
            <script>
                $(function () {

                    $('#@(local.Key.Replace(" ",String.Empty))_@(l.Key)_btnDelete').popover();

                    $(document).on('click', '#@(local.Key.Replace(" ",String.Empty))_@(l.Key)_cancelDelete', function (e) {
                        e.preventDefault();

                        $('body').on('hidden.bs.popover', function (e) {
                            $(e.target).data("bs.popover").inState.click = false;
                        });

                        $('#@(local.Key.Replace(" ",String.Empty))_@(l.Key)_btnDelete').popover('hide');
                    });

                    $('body').on('mousedown', function (e) {
                        $('#@(local.Key.Replace(" ",String.Empty))_@(l.Key)_btnDelete').each(function () {
                            //Check if the popover is active / contain an aria-describedby with a value
                            if ($(this).attr('aria-describedby') != null) {
                                //Put the value in a variable
                                var id = $(this).attr('aria-describedby');
                                if (!$(e.target).closest(".popover-content").length &&
                                    $(e.target).attr("aria-describedby") != id &&
                                    //Look if the click is a child of the popover box or if it's the button itself or a child of the button
                                    !$(e.target).closest('[aria-describedby="' + id + '"').length) {
                                    //trigger a click as if you clicked the button
                                    $('[aria-describedby="' + id + '"]').trigger("click");
                                }
                            }
                        });
                    });

                     $(document).on('submit', '#@(local.Key.Replace(" ",String.Empty))_@(l.Key)_deleteForm', function (e) {

                        formData = $(this).serializeArray();
                        dataString = "culture=" + formData[0].name + "&value=" +formData[0].value;

                        $.ajax({
                            url: "api/deleteCulture",
                            type: "DELETE",
                            data: dataString
                        }).done(function (data) {
                            location.reload();
                        }).fail(function (xhr, textStatus, errorThrown) {
                            alert('delete failed:' + xhr.responseText + ',status:' + textStatus + ',error:' + errorThrown);
                        });
                        e.preventDefault();
                    });


                    $('#@local.Key.Replace(" ", String.Empty)_@(l.Key)').editable({
                        error: function (response, newValue) {
                            if (response.status === 500) {
                                return 'Service unavailable. Please try later.';
                            } else {
                                return 'Value can\'t be null';
                            }
                        }
                    });
                })
            </script>
        }}
}